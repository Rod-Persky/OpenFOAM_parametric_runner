# Runs this case from start to end, you run a whole case by doing ./runCase
#  if you want to run parallel then ./runCase parallel

export PBS_O_WORKDIR=$PWD
export _logdir=$PBS_O_WORKDIR/logs
_script=$PBS_O_WORKDIR/../_scripts

function runApplication {
    echo "Running $1"
    $* | tee $_logdir/log.$1
}

function loadOF {
    module load gcc      > /dev/null 2>&1
    module load cmake    > /dev/null 2>&1
    module load openmpi  > /dev/null 2>&1
    module load mpi      > /dev/null 2>&1
    module load intel    > /dev/null 2>&1
    module load scotch   > /dev/null 2>&1
    module load openfoam > /dev/null 2>&1
}

function cleanCase {
    $_script/Allclean
}

function baseSetup {
    # Step 1, Setup the case
    step_1=$(qsub $_script/prolog) 
    echo "Running Prolog on $step_1"
}

function caseSetup {
    # Step 2, If there is a thisCase
    if [ -e thisCase ]; then
        step_2=$(qsub -W depend=afterany:$step_1 thisCase)
        echo "Running customisation script on $step_2"
    else
        echo "No customisation script (thisCase) detected"
        step_2=$step_1
    fi

    echo "Case setup ($step_2) is waiting on $step_1"
}

function runCase {
    # Step 3, Everything should be setup now so finally
    #  we decompose if nessesary and then run the case

    cp $_script/runCFD .runCFD

    # Replace time and memory limits with that in the thisCase file
    if [ -e thisCase ]; then
        cfd_mem=$(grep "cfd_mem" thisCase | cut -d '=' -f2 | tr -d ' ')
        cfd_time=$(grep "cfd_time" thisCase | cut -d '=' -f2 | tr -d ' ')
        echo "Running CFD for $cfd_time with $cfd_mem of ram"
        sed -i "s/mem=5000mb/mem=$cfd_mem/" .runCFD
        sed -i "s/walltime=05:00:00/walltime=$cfd_time/" .runCFD
    fi

    if [[ $(basename $0) =~ Parallel ]]; then
        $_script/decompose setup $(basename $0)
        step_3=$(qsub -W depend=afterany:$step_2 $_script/decompose)
    else
        step_3=$step_2      
    fi

    step_4=$(qsub -W depend=afterany:$step_3 .runCFD)

    echo "Decomposition step ($step_3) is waiting on $step_2"
    echo "CFD ($step_4) is waiting on $step_3"

}

mkdir -p $_logdir    


case $1 in
    start) 
             cleanCase
             baseSetup
             caseSetup
             runCase;;
    runCase) runCase;;
    stop)  foamEndJob -c;;
    *)     echo "o hai there";;
esac
